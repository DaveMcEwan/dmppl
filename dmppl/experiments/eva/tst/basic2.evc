
# Use with basic2.vcd

[config]
vcdhierprefix = "module:TOP."

# {{{ event

[[measure]]
type = "event"
name = "occurrerFromEvent{}"
hook = "event{}"
subs = [
  ["A", "B"],
]

[[measure]]
type = "event"
name = "occurrerFromBit{}"
hook = "bit{}"
subs = [
  ["A", "B"],
]

[[measure]]
type = "event"
name = "occurrerFromWire{}"
hook = "wire{}"
subs = [
  ["A", "B"],
]

[[measure]]
type = "event"
name = "occurrerFromReg{}"
hook = "reg{}"
subs = [
  ["A", "B"],
]

[[measure]]
type = "event"
name = "occurrerFromBitVec{}"
hook = "bitVec{}[0]"
subs = [
  ["A", "B"],
]

[[measure]]
type = "event"
name = "occurrerFromWireVec{}"
hook = "wireVec{}[1]"
subs = [
  ["A", "B"],
]

[[measure]]
type = "event"
name = "occurrerFromRegVec{}"
hook = "regVec{}[2]"
subs = [
  ["A", "B"],
]

# }}} event

# {{{ bstate

# Bstate hooks must be of VCD 2-state or 4-state type.
#[[measure]]
#type = "bstate"
#name = "twovalFromEvent{}"
#hook = "event{}"
#subs = [
#  ["A", "B"],
#]

[[measure]]
type = "bstate"
name = "twovalFromBit{}"
hook = "bit{}"
subs = [
  ["A", "B"],
]

[[measure]]
type = "bstate"
name = "twovalFromWire{}"
hook = "wire{}"
subs = [
  ["A", "B"],
]

[[measure]]
type = "bstate"
name = "twovalFromReg{}"
hook = "reg{}"
subs = [
  ["A", "B"],
]

[[measure]]
type = "bstate"
name = "twovalFromBitVec{}"
hook = "bitVec{}[0]"
subs = [
  ["A", "B"],
]

[[measure]]
type = "bstate"
name = "twovalFromWireVec{}"
hook = "wireVec{}[1]"
subs = [
  ["A", "B"],
]

[[measure]]
type = "bstate"
name = "twovalFromRegVec{}"
hook = "regVec{}[2]"
subs = [
  ["A", "B"],
]

# }}} bstate

# {{{ threshold

[[measure]]
type = "threshold"
name = "threshGeqFromReal{}"
hook = "real{}"
geq = 9
subs = [
  ["A", "B"],
]

[[measure]]
type = "threshold"
name = "threshLeqFromInteger{}"
hook = "integer{}"
leq = 9
subs = [
  ["A", "B"],
]

[[measure]]
type = "threshold"
name = "threshInsideFromBitVec{}"
hook = "bitVec{}"
leq = 7
geq = 2
subs = [
  ["A", "B"],
]

[[measure]]
type = "threshold"
name = "threshOutsideFromWireVec{}"
hook = "wireVec{}"
leq = 2
geq = 7
subs = [
  ["A", "B"],
]

# }}} threshold

# {{{ normal

[[measure]]
type = "normal"
name = "normFromReal{}"
hook = "real{}"
geq = 0.9
subs = [
  ["A", "B"],
]

[[measure]]
type = "normal"
name = "normFromInteger{}"
hook = "integer{}"
leq = 9
subs = [
  ["A", "B"],
]

[[measure]]
type = "normal"
name = "normBitVec{}"
hook = "bitVec{}"
leq = 7
geq = 2
subs = [
  ["A", "B"],
]

[[measure]]
type = "normal"
name = "normWireVec{}"
hook = "wireVec{}"
leq = -2
geq = -7
subs = [
  ["A", "B"],
]

# }}} normal
